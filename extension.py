import os
import sys
import shutil

g_src = 'otai'
g_tar = 'sai'
g_ext = 'experimental'
g_api = '_api_'
g_obj = '_object_type_'
g_pathTmp = '../../OTAI/tmp'
g_pathInc = '../../OTAI/inc'
g_statFlag = False


def RemoveFolder(path):
    if os.path.exists(path):
        shutil.rmtree(path)


def CreateFolder(path):
    if not os.path.exists(path):
        os.mkdir(path)


def RestoreFiles(files, dir):
    os.chdir(dir)

    for file in files:
        cmd = 'git checkout ' + file
        print(cmd)
        os.system(cmd)


def InsertContext(file, filters, contexts, options, rfind):
    
    with open(file, 'rb') as rf:
        rb = rf.read()
        #coding = chardet.detect(rb)
        data = rb.decode()

        for filter, context, option in zip(filters, contexts, options):
            pos = len(data) if rfind else 0
            for piece in filter:
                if rfind:
                    pos = data.rfind(piece, 0, pos)
                else:
                    pos = data.find(piece, pos)

                if pos == -1:
                    print('Error: cannot find [',piece,'] in file [',file,']')
                    return False

                pos += len(piece)

            if option == 'before':
                pos = data.rfind('\n', 0, pos) + 1
            elif option == 'after':
                pos = data.find('\n', pos) + 1
            
            conv = list(data)
            conv.insert(pos, context)
            data = ''.join(conv)

        with open(file, 'wb') as wf:
            wf.write(data.encode())


def ListFiles(path):
    list = os.listdir(path)
    files = {}
    for i in list:
        file = os.path.join(path, i)
        if os.path.isfile(file):
            files[i] = file
    return files


def IsComponent(component):
    return component != '' and component != 'types' and component != 'status'


def WriteHeaderLicense(fs):
    strHeader = r'''/**
 * Copyright (c) 2014 Microsoft Open Technologies, Inc.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License"); you may
 *    not use this file except in compliance with the License. You may obtain
 *    a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
 *    CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 *    LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 *    FOR A PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
 *
 *    See the Apache Version 2.0 License for specific language governing
 *    permissions and limitations under the License.
 *
 *    Microsoft would like to thank the following companies for their review and
 *    assistance with these files: Intel Corporation, Mellanox Technologies Ltd,
 *    Dell Products, L.P., Facebook, Inc., Marvell International Ltd.
 *
 * AUTOGENERATED FILE! DO NOT EDIT
 *
'''
    fs.write(strHeader)


def IsSkip(line):
    keys = ['@isrecoverable', '@flags Contains']
    for key in keys:
        if line.find(key) != -1:
            return True
    
    if g_statFlag:
        if line.strip(' ') == '*\n':
            return True
        if line.find('* @') != -1 and line.find('@brief') == -1:
            return True

    return False


def ReplaceGlobal(line):
    srcs = {'linecard': 'switch',
            'Linecard': 'Switch',
            '@defgroup ' + g_src.upper(): '@defgroup ' + g_tar.upper() + g_ext.upper() + g_src.upper(),
            ' ' + g_src.upper() + ' - ': ' ' + g_tar.upper() + ' - ' + g_src.upper() + ' ',
            g_src + '_stat_value_t': 'uint64_t',
            '* @flags SET_ONLY': '* @flags CREATE_AND_SET',
            g_src + '_scanning_status_t': g_tar + '_uint32_t',
            g_src + '_oper_status_t': g_tar + '_uint32_t'}
    for key, value in srcs.items():
        if line.find(key) != -1:
            line = line.replace(key, value)
    
    return line


def ReplaceDefined(file, line, fs):
    if line.find(file) != -1:
        fs.write(line.replace(file, g_tar + g_ext + file))
        fs.write(' *\n')
        return True

    temp = file.replace('.', '_').upper()
    src = '__' + temp + '_'

    if line.find(src) == -1:
        return False
    
    tar = '__' + g_tar.upper() +  g_ext.upper()  + temp.upper() + '_'
    fs.write(line.replace(src, tar))
    return True


def ReplaceInclude(line, fs):
    if line.find(g_src) == -1 or line.find('.h') == -1:
        return False

    if line.find('types') != -1 or line.find('status') != -1:
        fs.write(line.replace(g_src, g_tar))
        return True
    
    
    fs.write(line.replace(g_src, g_tar + g_ext))
    return True


def ReplaceNonComponent(line, fs):
    src = g_tar + g_api
    if line.find(src) != -1:
        line = line.replace(src, src + g_src + '_')

    src = src.upper()
    if line.find(src) != -1:
        line = line.replace(src, src + g_src.upper() + '_')
        line = line.replace(g_tar + '_', g_tar + '_' + g_src + '_')

    src = g_tar + g_obj
    if line.find(src) != -1:
        line = line.replace(src, src + g_src + '_')

    src = src.upper()
    if line.find(src) != -1:
        line = line.replace(src, src + g_src.upper() + '_')

    fs.write(line)
    return True


def ReplaceComponent(component, line, fs):
    if not IsComponent(component):
        ReplaceNonComponent(line, fs)
        return True

    src = component + ';'
    if line.find(src) != -1:
        line = line.replace(src, g_src + '_' + src)

    src = component + '_'
    if line.find(src) != -1:
        fs.write(line.replace(src, g_src + '_' + src))
        return True
    
    src = src.upper()
    if line.find(src) != -1:
        fs.write(line.replace(src, g_src.upper() + '_' + src.upper()))
        return True
    
    return False


def ReplaceSrc(component, line):
    src = g_src + '_'
    if line.find(src) != -1:
        line = line.replace(src, g_tar + '_')
    
    src = src.upper()
    if line.find(src) != -1:
        line = line.replace(src, g_tar.upper() + '_')

    global g_statFlag
    if line.find('@brief ' + component.upper() + ' stat IDs') != -1 or line.find('typedef enum _' + g_tar +  '_' + component +'_stat_t') != -1:
        g_statFlag = True
    elif line.find('} ' + g_tar +  '_' + component +'_stat_t') != -1:
        g_statFlag = False
    
    return line


def QueryNewPath(component, file, components):
    ''' currently we do not convert otai.h and otaitypes.h '''
    if IsComponent(component):
        components.append(component)
    else:
        return None
    
    return g_pathTmp + '/' + g_tar + g_ext + file


def ConvertFile(file, path, components):
    index1 = file.find(g_src)
    index2 = file.rfind('.h')
    if index1 == -1 or index2 == -1:
        return

    component = file[index1 + len(g_src) : index2]
    newPath = QueryNewPath(component, file, components)
    if newPath is None:
        return

    with open(path, 'rt') as rf:
        rf.readline()
        with open(newPath, 'wt') as wf:
            WriteHeaderLicense(wf)
            for line in rf:
                if IsSkip(line):
                    continue
                # global replace
                line = ReplaceGlobal(line)
                # header macro
                if ReplaceDefined(file, line, wf):
                    continue
                # include files
                if ReplaceInclude(line, wf):
                    continue

                line = ReplaceSrc(component, line)
                # component
                if ReplaceComponent(component, line, wf):
                    continue

                wf.write(line)

    print(path, '->', newPath)


def InsertFiles(files, components):
    print(components)

    extHeader = '/* ' + g_src.upper() + ' extension */\n'
    extContext = ''
    typeContext = ''
    apiText = g_tar + g_api + g_src + '_'
    apiText = apiText.upper()
    objText = g_tar + g_obj + g_src + '_'
    objText = objText.upper()
    for component in components:
        extHeader += '#include "' + g_tar + g_ext + g_src + component + '.h"\n'
        extContext += '    ' + apiText + component.upper() + ',\n\n'
        typeContext += '    ' + objText + component.upper() + ',\n\n'

        file = g_tar + g_ext + g_src + component + '.h'
        path = g_pathTmp + '/' + file
        if os.path.exists(path):
                shutil.copyfile(path, './' + file)
    extHeader += '\n'

    spellList = ['Alibaba', 'attenuator', 'Attenuator', 'AUTOGENERATED', 'Backscatter', 'TEC']
    spellList.extend(x.upper() for x in components)
    spellList.sort()
    spellText = 'OTAI\n'
    for i in spellList:
        spellText += i + '\n'

    filters = [
        [['* @brief Extensions to SAI APIs', '/**'], ['sai_api_extensions_t', 'Add new experimental APIs above this line']],
        [['sai_object_type_extensions_t', 'Add new experimental object types above this line']],
        [['\n']]
    ]
    contexts = [
        [extHeader, extContext],
        [typeContext],
        [spellText]
    ]
    options = [
        ['before', 'before'],
        ['before'],
        ['before']
    ]
    rfinds = [
        True,
        True,
        True
    ]

    for file, filter, context, option, rfind in zip(files, filters, contexts, options, rfinds):
        InsertContext(file, filter, context, option, rfind)


def main(argv):
    gitFiles = ['saiextensions.h', 'saitypesextensions.h', '../meta/aspell.en.pws']
    RestoreFiles(gitFiles, './SAI/experimental')
    RemoveFolder(g_pathTmp)

    if len(argv) > 1 and argv[1] == 'clean':
        return

    CreateFolder(g_pathTmp)
    convfiles = ListFiles(g_pathInc)
    
    components = []
    for key, value in convfiles.items():
        ConvertFile(key, value, components)

    components.sort()

    InsertFiles(gitFiles, components)


if __name__ == "__main__":
    main(sys.argv)